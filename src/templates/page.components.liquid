<div class="layout-content-wrapper">
  <div class="aplos-container drawer-shifter">
    <h1 class="page-title">{{ page.title }}</h1>
    <div class="rte"><p>This page is here to document available components for use on the site. These are hard coded in an alternate page template file named <code>page.components.liquid</code>.</p></div>

    <h2 class="docs-title">Table of Contents</h2>
    <ul class="text-sans-serif" style="font-size: 90%;">
      <li>
        <a href="#docs-hero-elements">Hero Elements</a>
        <ul>
          <li><a href="#docs-hero-elements-hero">Hero</a></li>
          <li><a href="#docs-hero-elements-page-hero">Page Hero</a></li>
          <li><a href="#docs-hero-elements-page-header">Page Header</a></li>
          <li><a href="#docs-hero-elements-page-banner">Page Banner</a></li>
        </ul>
      </li>
      <li><a href="#docs-product-card">Product Card</a></li>
      <li><a href="#docs-article-card">Article Card</a></li>
      <li><a href="#docs-aplos-block">Aplos Block</a></li>
      <li><a href="#docs-drawer">Drawer</a></li>
      <li><a href="#docs-collapse">Collapse</a></li>
      <li><a href="#docs-quantity-adjuster">Quantity Adjuster</a></li>
      <li><a href="#docs-newsletter-form">Newsletter Form</a></li>
    </ul>

    <h2 id="docs-hero-elements" class="docs-title">Hero Elements</h2>
    <p>Hero elements are elements that (generally) go at the top of the page.  There are a couple different types depending on the use case.</p>

    <h5 id="docs-hero-elements-hero" class="docs-subtitle">Hero</h5>
    <p>Full screen element with support for title, content, cta and background image / video.  Only used on the homepage.</p>
    <p>See <code>snippets/hero.liquid</code>.</p>
    <h5 id="docs-hero-elements-page-hero" class="docs-subtitle">Page Hero</h5>
    <p>Full screen element with support for title and background image.  Used like a hero but for internal pages.  May also be used below the top of the page (see product detail reviews)</p>
    <p>See <code>snippets/page-hero.liquid</code>.</p>    
    <h5 id="docs-hero-elements-page-header" class="docs-subtitle">Page Header</h5>
    <p>This element is hidden from the screen but outputs the passed in title as a <code>h1</code> tag making it good for pages that don't use a text title.</p>
    <p>See <code>snippets/page-header.liquid</code>.</p>    
    <h5 id="docs-hero-elements-page-banner" class="docs-subtitle">Page Banner</h5>
    <p>A full width image banner with options for desktop and mobile images.  Doesn't contain any text.</p>
    <p>See <code>snippets/page-banner.liquid</code>.</p>   

    <h2 id="docs-product-card" class="docs-title">Product Card</h2>
    <p>See <code>snippets/product-card.liquid</code>.</p>
    {% assign all_collection = collections['all'] %}
    {% if all_collection.products.size > 0 %}
      {% assign test_product = all_collection.products[0] %}
      <div class="docs-well docs-well--constrained">
        {% include 'product-card', product: test_product %}
      </div>
    {% else %}
      <em>The product card requires a Shopify product in order to work.  <a href="{{ shop.url }}/admin/products/new">Go here to make one</a></em>.
    {% endif %}      

    <h2 id="docs-article-card" class="docs-title">Article Card</h2>
    <p>See <code>snippets/article-card.liquid</code>.</p>
    {% assign recipes_blog = blogs['recipes'] %}
    {% if recipes_blog.articles_count > 0 %}
      {% assign test_article = recipes_blog.articles[0] %}
      <div class="docs-well docs-well--constrained">
        {% include 'article-card', article: test_article %}
      </div>
    {% endif %}

    <h2 id="docs-aplos-block" class="docs-title">Aplos Block</h2>

    <p>The main UI elements of this website is the <em>Aplos Row</em> and <em>Aplos Block</em>.</p>
    <p>The Aplos Block is a content container that supports both a background image and background video.  It has responsive padding to match other UI pieces on the site.  The javascript initializer for these elements is contained inside the base section constructor so that <em>all sections</em> on the site can use them without needing to initialize them inside each specific section.  See <code>snippets/aplos-block.liquid</code> for the full snippet API.</p>
    <p>The Aplos Row is an optional container for aplos block elements that will constrain overall height and force even block height.</p>
    <p>Style rules for both of these elements can be found in <code>_scripts/components/aplos.scss</code></p>


    <h2 id="docs-drawer" class="docs-title">Drawer</h2>

    <p>Drawers are elements that are fixed to the side of the screen and are hidden by default.  Opening them will transition the element on screen and apply a backdrop to focus user attention and act as a clickable area that dismisses the drawer.</p>

    <p>The API closely follows the one for Bootstrap's modals.  You can create the drawer programatically by calling the <code>Drawer</code> constructor and passing in options or by using <code>data-*</code> attributes to specify the element, trigger and options.  The example below uses the data API.</p>

    <br />
    <p>
      <button data-toggle="drawer" data-target="#my-drawer" class="btn btn-primary">Trigger drawer</button>
    </p>

    <h5 class="docs-subtitle">Page Shifting</h5>
    <p>The design of the site requires that page content shift in the direction of the drawer as if it is being pushed to the side.  To achieve this affect, any elements that need to be shifted must have the <code>.drawer-shifter</code> class applied to the closest non-fixed position parent element.  It would be nice to apply this class to the page container and be done with it but browsers can't handle fixed elements <em>inside</em> of elements with a transform applied to them.  This means you may have to apply the class to multiple elements in a single template (see the product page for instance with it's transaction bar...).  This also means that any drawer markup must exist <em>outside</em> of the element that shifts in response to the drawer.  Seems obvious but just remember to put your drawer markup as far down the page as possible</p>    

    <h5 class="docs-subtitle">Events</h5>

    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <td><code>hide.drawer</code></td>
            <td>Triggered when the <code>hide</code> method is called even if the drawer is already closed.</td>
          </tr>
          <tr>
            <td><code>hidden.drawer</code></td>
            <td>Triggered when the hide animation completes.</td>
          </tr>
          <tr>
            <td><code>show.drawer</code></td>
            <td>Triggered when the <code>show</code> method is called even if the drawer is already open.</td>
          </tr>
          <tr>
            <td><code>shown.drawer</code></td>
            <td>Triggered when the show animation completes.</td>
          </tr>
        </tbody>
      </table>
    </div>

    <h2 id="docs-collapse" class="docs-title">Collapse</h2>

    <p>Bootstrap "collapse" is included, we can use this feature to build single elements with toggle-able visibility and multiple elements with accordion behavior.</p>
    <p>Be sure not to apply margins and padding directly to the elements that you are collapsing as it will cause stuttering during the transition between states.</p>


    <div class="docs-well docs-well--constrained">
      <a href="#collapse-item-2" class="btn btn-primary" data-toggle="collapse" aria-expanded="false" aria-controls="collapse-item-2">Toggle Contents</a>
      <div id="collapse-item-2" class="collapse">
        <br />
        <h3>Test Content</h3>
        <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
        tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
        quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
        consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse
        cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
        proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
        <div class="dots">
          <div class="dot is-active">
            1
          </div>
          <div class="dot">
            2
          </div>
          <div class="dot">
            4
          </div>         
        </div>         
      </div>
    </div>

    <h5 class="docs-subtitle">Expandable List</h5>

    <p>The expandable list is it's own component.  Each list is made up of a header and body with child items.  See <code>_styles/components/expandable-list.scss</code> for styling.</p>

    <div class="docs-well docs-well--constrained">
      <div class="expandable-list">
        <div class="expandable-list__header">
          <a href="#sublist-1" class="expandable-list__header-title" data-toggle="collapse" aria-expanded="true" aria-controls="sublist-1">
            Category 1
          </a>
        </div>
        <div id="sublist-1" class="collapse show">
          <div class="expandable-list__body">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat.
            </p>
            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse
            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
          </div>
        </div>
      </div>
      <div class="expandable-list">
        <div class="expandable-list__header">
          <a href="#sublist-2" class="expandable-list__header-title" data-toggle="collapse" aria-expanded="true" aria-controls="sublist-2">
            Category 2
          </a>
        </div>
        <div id="sublist-2" class="collapse">
          <div class="expandable-list__body">
            <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
            tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,
            quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo
            consequat.
            </p>
            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse
            cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
            proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
          </div>
        </div>
      </div>
    </div>

    <h2 id="docs-quantity-adjuster" class="docs-title">Quantity Adjuster</h2>
    <p>The quantity adjuster automatically comes with javascript functionality that provides input validation and UI constraints around <code>min</code> / <code>max</code> attributes set on the input element.  It requires a specific markup structure with the following data attributes.</p>

    <div class="docs-well docs-well--constrained">
<pre style="margin: 0;">
- [data-quantity-adjuster]
  - [data-increment]
  - input[type="number"]
  - [data-decrement]
</pre>
    </div>

    <p>By default, the component's javascript will initialize all quantityAdjuster components on page load as well as on all Shopify theme editor events.  There is a static method available available as <code>QuantityAdjuster.refresh()</code> which will initialize any components on the page that have yet to be initialized.</p>

    <div class="docs-well docs-well--dark">
      <div class="quantity-adjuster" data-quantity-adjuster>
        <button class="quantity-adjuster__decrement" data-decrement>-</button>
        <input type="number" value="2" min="1" max="5" />
        <button class="quantity-adjuster__increment" data-increment>+</button>
      </div>
      <br />
      <br />

      <a href="#" class="btn btn-secondary" data-qa-toggle-enabled>Toggle Enabled</a>
    </div>

    <h2 id="docs-newsletter-form" class="docs-title">Newsletter Form</h2>
    <p>The newsletter form is a UI component for displaying a form input with associated messaging for different subscription states.  The contents element wraps the form inputs as well as the form message.  Different message strings are stored as data attributes and inserted into the dom as necessary.  It requires a specific markup structure with the following data attributes.</p>

    <div class="docs-well">
<pre style="margin: 0;">
- form.newsletter-form
- .newsletter-form-contents[data-form-contents]
- .newsletter-form-inputs
- .newsletter-form-message[data-form-message][data-success][data-fail]
</pre>
    </div>        

    <p>Use the buttons below to toggle various states of the form.</p>

    <div class="docs-well docs-well--dark">
      <form id="newsletter-form" class="newsletter-form form-inverted">
        <div class="newsletter-form-contents" data-form-contents>
          <div class="newsletter-form-inputs">
            <div class="form-group">
              <div class="minimal-input-box">
                <input type="email" class="minimal-input-box__input" placeholder="Enter your text here" required="required"/>
                <button type="submit" class="minimal-input-box__submit">
                  {% include 'icon-arrow' %}
                  <span class="icon-fallback-text">Submit</span>
                </button>
              </div>
            </div>
          </div>
            <div class="newsletter-form-message"
                data-form-message
                data-success="{% render 'newsletter-form-message', type: 'success' %}"
                data-already-subscribed="{% render 'newsletter-form-message', type: 'already-subscribed' %}"
                data-fail="{% render 'newsletter-form-message', type: 'fail' %}">
            </div>
        </div>
        <br />
        <br />

        <a href="#" class="btn btn-secondary" data-newsletter-trigger-success>Trigger Success</a>
        <a href="#" class="btn btn-secondary" data-newsletter-trigger-subscribed>Trigger Already Subscribed</a>
        <a href="#" class="btn btn-secondary" data-newsletter-trigger-fail>Trigger Failure</a>
      </form>
    </div>

  </div>
</div>

<div id="my-drawer" class="drawer">
  <div class="drawer-overflow">
    <a href="#" class="drawer__close" data-drawer-close>
      {% include 'icon-close' %}
    </a>
    <div class="drawer__contents">           
      <div class="drawer__header">       
        <h6>Drawer Header</h6>
      </div>
      <div class="drawer__body">
        <div class="drawer__body-contents">
          <p>Drawer content goes here.</p>
        </div>
      </div>
      <div class="drawer__footer">
        Throw some content in the footer of this drawer.
      </div>
    </div>          
  </div>
</div>
